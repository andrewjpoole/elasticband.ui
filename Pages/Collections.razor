@page "/collections"
@inject IElasticBand _elasticBand
@inject NavigationManager _navigationManager;

<h1>ElasticBand Collections</h1>

@if (_collections == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div>
    <MatTextField @bind-Value="_itemFilterValue" Label="Filter items" Dense="true" Icon="filter_list" Outlined="true" Type="search" HideClearButton="false"></MatTextField>
    <MatButton Raised="true" Icon="refresh" @onclick="RefreshItems">Refresh</MatButton>
    <MatButton Raised="true" Icon="create" @onclick="CreateNewCollection" Style="float:right;">Create new collection</MatButton>
</div>

    <MatTable Items="@_collections" class="mat-elevation-z5" Striped="true">
        <MatTableHeader>
            <th>Open</th>
            <th>Name</th>
            <th>Collection Id</th>
            <th>Index</th>
            <th>Timestamp</th>
        </MatTableHeader>
        <MatTableRow>
            <td>
                <MatIconButton Icon="open_in_browser" OnClick="@(e => OpenCollection(context.Id))"></MatIconButton>
            </td>
            <td>@context.Name</td>
            <td>@context.Id</td>
            <td>@context.Index</td>
            <td>@context.Timestamp</td>
        </MatTableRow>
    </MatTable>
}

@code {
    private string _itemFilterValue = "";
    private List<CollectionDefinition> _collections;

    protected override async Task OnInitializedAsync()
    {
        _collections = await GetCollections();
    }

    private async Task<List<CollectionDefinition>> GetCollections(string queryText = "")
    {
        var response = await _elasticBand.Query<CollectionDefinition>("eb_collections", queryText).ConfigureAwait(false);

        if (response.Ok)
            return response.Data;

        return null;
    }

    private async Task RefreshItems()
    {
        _collections = await GetCollections(_itemFilterValue);
    }

    private void CreateNewCollection()
    {
        _navigationManager.NavigateTo(Urls.NewCollection);
    }

    private void OpenCollection(string id)
    {
        _navigationManager.NavigateTo(Urls.CollectionWithId(id));
    }
}
