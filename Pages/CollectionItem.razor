@page "/collections/{CollectionId}/collection-item/{ItemId}"
@implements IDisposable;
@inject IJSRuntime _jsRuntime;
@inject IElasticBand _elasticBand;
@inject NavigationManager _navigationManager;

@if (_isLoading == true)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="text-align: right; float:right; margin: 2px;">
        <MatButton Raised="true" Icon="keyboard_backspace" @onclick="NavigateBackToCollection">Back to collection</MatButton>
        <MatButton Raised="true" Icon="save" @onclick="SaveChanges">Save Changes</MatButton>
        <MatButton Raised="true" Icon="delete_forever" @onclick="DeleteItem">Delete Item</MatButton>
    </div>

    <h1>@_collectionItem.GetProperty("id")</h1>
    @_collectionItem.GetProperty("timestamp")
}
<p>
    <div id="itemEditorContainer" style="width:1200px; height: 500px; padding-top: 20px;"></div>
</p>

@code {

    [Parameter]
    public string CollectionId { get; set; }
    [Parameter]
    public string ItemId { get; set; }

    private CollectionDefinition _collection;

    private JsonElement _collectionItem;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _collection = await GetCollectionDefinition(CollectionId);

        //Console.WriteLine($"Fetching collectionitem with id:{CollectionId}...");
        _collectionItem = await GetItemById(ItemId);

        StateHasChanged();
        //Console.WriteLine("Calling editor setContents");
        await _jsRuntime.InvokeVoidAsync("monacoEditorFunctions.setContents", "itemEditorContainer", "json", _collectionItem.ToString());

        _isLoading = false;
    }

    private async Task<CollectionDefinition> GetCollectionDefinition(string id)
    {
        var response = await _elasticBand.GetDocumentByID<CollectionDefinition>(CollectionDefinition.collectionsIndex, id).ConfigureAwait(false);

        if (response.Ok)
            return response.Data;

        return null;
    }

    private async Task<JsonElement> GetItemById(string itemId)
    {
        var response = await _elasticBand.GetDocumentByID<object>(_collection.Index, itemId).ConfigureAwait(false);

        if (response.Ok)
            return (JsonElement)response.Data;

        return new JsonElement();
    }

    private async Task SaveChanges()
    {
        var exampleJsonObjectString = await _jsRuntime.InvokeAsync<string>("monacoEditorFunctions.getContents", "itemEditorContainer");
        _collectionItem = (JsonElement)JsonSerializer.Deserialize<object>(exampleJsonObjectString, new JsonSerializerOptions { WriteIndented = true });
        
        _collectionItem = _collectionItem
            .RemoveProperty("timestamp")
            .AddProperty("timestamp", DateTime.UtcNow);

        var response = await _elasticBand.Index<object>(_collection.Index, _collectionItem, ItemId).ConfigureAwait(false);

        if (response.Ok)
            Console.WriteLine($"Saved response: {response.Result}");
        else
            Console.WriteLine($"Not saved response: {response.Result}");
    }

    private async Task DeleteItem()
    {
        var response = await _elasticBand.Delete(_collection.Index, ItemId).ConfigureAwait(false);

        if (response.Ok)
        {
            _navigationManager.NavigateTo(Urls.CollectionWithId(_collection.Id));
        }
    }

    private void NavigateBackToCollection()
    {
        _navigationManager.NavigateTo(Urls.CollectionWithId(_collection.Id));
    }

    public void Dispose()
    {
        _jsRuntime.InvokeAsync<string>("monacoEditorFunctions.disposeEditor", "itemEditorContainer");
    }
}