@page "/collections/{collectionId}"
@implements IDisposable
@inject IJSRuntime _jsRuntime;
@inject IElasticBand _elasticBand;
@inject NavigationManager _navigationManager;

@if (_collection == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <h1>@_collection.Name collection</h1>
        </div>
        <div class="row">
            <div class="col">                
                <p><MatTextField Value="@_collection.Name" Label="Name" ReadOnly="true" Style="width:100%;" Outlined="true"></MatTextField></p>
                <p><MatTextField Value="@_collection.Id" Label="Id" ReadOnly="true" Style="width:100%;" Outlined="true"></MatTextField></p>
                <p><MatTextField Value="@_collection.Index" Label="Elasticsearch Index" ReadOnly="true" Style="width:100%;" Outlined="true"></MatTextField></p>
                <p><MatTextField Value="@_collection.Timestamp" Label="TimeStamp" ReadOnly="true" Style="width:100%;" Outlined="true"></MatTextField></p>
                <p><MatTextField @bind-Value="_collection.ExampleIdPattern" Label="Example Id string" Style="width:100%;" Outlined="true"></MatTextField></p>
            </div>
            <div class="col">
                <label style="font-size: small;">Example json Object</label>
                <div id="collectionsEditorContainer" style="width:450px; height: 320px;"></div>
            </div>
            <div class="col">
                <p><MatTextField @bind-Value="_collection.Description" Label="Description" TextArea="true" Outlined="true" Style="width: 100%; height: 150px;"></MatTextField></p>
                <p><MatButton Raised="true" Icon="save" @onclick="SaveChanges">Save Changes</MatButton></p>
                <p><MatButton Raised="true" Icon="delete_forever" @onclick="DeleteCollection">Delete Collection</MatButton></p>
            </div>
        </div>
        <div class="row">
            <h1>@_collection.Name items</h1>
        </div>
        <div class="row">
            <div>
                <MatTextField @bind-Value="_itemFilterValue" Label="Filter items" Dense="true" Icon="filter_list" Outlined="true" Type="search" HideClearButton="false"></MatTextField>
                <MatButton Raised="true" Icon="refresh" @onclick="RefreshItems">Refresh</MatButton>
                <MatButton Raised="true" Icon="delete_forever">Delete Item</MatButton>
                <MatButton Raised="true" Icon="create" @onclick="CreateNewItem">Create new</MatButton>
            </div>
        </div>
        <div class="row">
            @if (_collectionItems == null)
            {
                <p><em>Loading items...</em></p>
            }
            else if (_collectionItems.Count == 0)
            {
                <p><em>This collection does not have any items yet.</em></p>
            }
            else
            {
                <MatTable Items="@_collectionItems" class="mat-elevation-z5" Striped="true">
                    <MatTableHeader>
                        <th>Open</th>
                        <th>Id</th>
                        <th>TimeStamp</th>
                        <th>@_itemPropertyNames[0]</th>
                        <th>@_itemPropertyNames[1]</th>
                        <th>@_itemPropertyNames[2]</th>
                        <th>@_itemPropertyNames[3]</th>                      
                    </MatTableHeader>
                    <MatTableRow>
                        <td>
                            <MatIconButton Icon="open_in_browser" OnClick="@(e => OpenCollectionItem(context.GetProperty("id").ToString()))"></MatIconButton>                            
                        </td>
                        <td>@context.GetProperty("id")</td>
                        <td>@context.GetProperty("timestamp")</td>
                        @{var i = 0;}
                        @foreach (var prop in context.EnumerateObject())
                         {
                            @if (prop.Name == "id" || prop.Name == "timestamp" || i > 3)
                                continue;
                            _itemPropertyNames[i] = prop.Name;
                            <td>@prop.Value</td>
                            i = i + 1;
                         }

                    </MatTableRow>
                </MatTable>
            }
        </div>
    </div>
}

<MatSnackbar @bind-IsOpen="@_snackbarIsOpen">
    <MatSnackbarContent>@_snackbarMessage</MatSnackbarContent>
    <MatSnackbarActions>
        <MatButton Raised="true" OnClick="@(e => { _snackbarOnOkClick?.Invoke(); _snackbarIsOpen = false; })">@_snackbarOkButtonText</MatButton>
        @if (_snackbarShowCancelButton)
        {
            <MatButton Raised="true" OnClick="@(e => { _snackbarIsOpen = false; })">@_snackbarCancelButtonText</MatButton>
        }
    </MatSnackbarActions>
</MatSnackbar>

@code {

    private bool _snackbarIsOpen { get; set; }
    private bool _snackbarShowCancelButton { get; set; }
    private string _snackbarMessage { get; set; }
    private string _snackbarOkButtonText { get; set; } = "Ok";
    private string _snackbarCancelButtonText { get; set; } = "Cancel";
    private Action _snackbarOnOkClick { get; set; }

    [Parameter]
    public string collectionId { get; set; }
    private CollectionDefinition _collection;
    private List<JsonElement> _collectionItems;
    private string _itemFilterValue = "";
    private string[] _itemPropertyNames = new string[] { "prop3", "prop4", "prop5", "prop6" };

    protected override async Task OnInitializedAsync()
    {        
        _collection = await GetCollectionDefinition(collectionId);

        if (string.IsNullOrEmpty(_collection.ExampleJsonObjectString))
            _collection.ExampleJsonObjectString = "{}";

        var exampleObject = JsonSerializer.Deserialize<object>(_collection.ExampleJsonObjectString);
        _collection.ExampleJsonObject = exampleObject;
        _collection.ExampleJsonObjectString = JsonSerializer.Serialize(exampleObject, new JsonSerializerOptions { WriteIndented = true });

        _collectionItems = await GetCollectionItems(_collection.Index, _itemFilterValue);
        StateHasChanged();

        await _jsRuntime.InvokeVoidAsync("monacoEditorFunctions.setContents", "collectionsEditorContainer", "json", _collection.ExampleJsonObjectString);        
    }

    private async Task<CollectionDefinition> GetCollectionDefinition(string id)
    {
        var response = await _elasticBand.GetDocumentByID<CollectionDefinition>(CollectionDefinition.collectionsIndex, id).ConfigureAwait(false);

        if (response.Ok)
            return response.Data;

        return null;
    }

    private async Task<List<JsonElement>> GetCollectionItems(string index, string query)
    {
        var response = await _elasticBand.Query<object>(index, query).ConfigureAwait(false);

        if (response.Ok)
        {
            var items = response.Data.Cast<JsonElement>().ToList();
            return items;
        }

        return new List<JsonElement>();
    }

    private async Task RefreshItems()
    {
        _collectionItems = await GetCollectionItems(_collection.Index, _itemFilterValue);
    }

    private async Task SaveChanges()
    {
        var exampleJsonObjectString = await _jsRuntime.InvokeAsync<string>("monacoEditorFunctions.getContents", "collectionsEditorContainer");
        _collection.ExampleJsonObjectString = exampleJsonObjectString;
        _collection.ExampleJsonObject = JsonSerializer.Deserialize<object>(exampleJsonObjectString, new JsonSerializerOptions { WriteIndented = true });

        var response = await _elasticBand.Index<object>(CollectionDefinition.collectionsIndex, _collection, _collection.Id).ConfigureAwait(false);

        if (response.Ok)
            showSnackbar("changes saved", false);        
    }

    private async Task DeleteCollection()
    {
        var response = await _elasticBand.Delete(CollectionDefinition.collectionsIndex, _collection.Id).ConfigureAwait(false);

        if (response.Ok)
        {
            showSnackbar("collection deleted", false);
            _navigationManager.NavigateTo(Urls.Collections);
        }
    }

    private void OpenCollectionItem(string id)
    {
        _navigationManager.NavigateTo(Urls.CollectionItemWithId(_collection.Id, id));
    }

    private void CreateNewItem()
    {
        _navigationManager.NavigateTo(Urls.CollectionItemNew(_collection.Id));
    }

    public void Dispose()
    {
        _jsRuntime.InvokeAsync<string>("monacoEditorFunctions.disposeEditor", "collectionsEditorContainer");
    }

    private void showSnackbar(string message, bool showCancelButton = true, string okButtonText = "", string cancelButtonText = "", Action onSnackbarOk = null)
    {
        _snackbarMessage = message;
        _snackbarIsOpen = true;
        _snackbarOnOkClick = onSnackbarOk;
        _snackbarShowCancelButton = showCancelButton;
        if (!string.IsNullOrEmpty(okButtonText))
            _snackbarOkButtonText = okButtonText;
        if (!string.IsNullOrEmpty(cancelButtonText))
            _snackbarOkButtonText = cancelButtonText;
        this.StateHasChanged();
    }

    private void handleSnackbarOkClick()
    {
    }
}
