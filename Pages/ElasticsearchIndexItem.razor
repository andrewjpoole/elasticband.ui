@page "/elasticsearch-indicies/{Index}/{ItemId}"
@implements IDisposable;
@inject IJSRuntime _jsRuntime;
@inject IClipboardService _clipboardService;
@inject IMatToaster _toaster
@inject IElasticBand _elasticBand;
@inject NavigationManager _navigationManager;

@if (_isLoading == true)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="text-align: right; float:right; margin: 2px;">
        <MatButton Raised="true" Icon="keyboard_backspace" @onclick="NavigateBackToIndex">Back to index</MatButton>
        <MatButton Raised="true" Icon="save" @onclick="SaveChanges">Save Changes</MatButton>
        <MatButton Raised="true" Icon="delete_forever" @onclick="DeleteItem">Delete Item</MatButton>
    </div>

    <MatTextField @bind-Value="ItemId" Label="Item Id" Outlined="true" Style="width:500px;" title="If you change the Id, a new document will be posted to Elasticsearch"></MatTextField>

}
<p>
    <div id="indexItemEditorContainer" style="width:1200px; height: 500px; padding-top: 20px;"></div>
</p>
<br>

@code {

    [Parameter]
    public string Index { get; set; }
    [Parameter]
    public string ItemId { get; set; }

    private JsonElement _index;
    private JsonElement _item;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _item = await GetItemById(ItemId);

        StateHasChanged();

        await _jsRuntime.InvokeVoidAsync("monacoEditorFunctions.setContents", "indexItemEditorContainer", "json", _item.GetProperty("_source").ToString());

        _isLoading = false;
    }

    private async Task<JsonElement> GetItemById(string itemId)
    {
        var response = await _elasticBand.GetClient().GetAsync($"/{Index}/_doc/{itemId}");

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            var item = JsonSerializer.Deserialize<JsonElement>(jsonString);
            return item;
        }

        return new JsonElement();
    }

    private async Task SaveChanges()
    {
        var jsonSourceString = await _jsRuntime.InvokeAsync<string>("monacoEditorFunctions.getContents", "indexItemEditorContainer");
        var source = (JsonElement)JsonSerializer.Deserialize<object>(jsonSourceString, new JsonSerializerOptions { WriteIndented = true });

        //_collectionItem = _collectionItem
        //    .RemoveProperty("timestamp")
        //    .AddProperty("timestamp", DateTime.UtcNow);

        var client = _elasticBand.GetClient();
        var requestString = $"{Index}/_doc/{ItemId}";
        var content = new StringContent(source.ToString(), System.Text.Encoding.UTF8, "application/json");
        var response = await client.PostAsync(requestString, content);

        if (response.IsSuccessStatusCode)
        {
            _toaster.Add("Changes saved", MatToastType.Success);
        }
    }

    private async Task DeleteItem()
    {
        var response = await _elasticBand.Delete(Index, ItemId).ConfigureAwait(false);

        if (response.Ok)
        {
            _toaster.Add("Item deleted", MatToastType.Success);
            _navigationManager.NavigateTo(Urls.Index(Index));
        }
    }

    private void NavigateBackToIndex()
    {
        _navigationManager.NavigateTo(Urls.Index(Index));
    }   

    public void Dispose()
    {
        _jsRuntime.InvokeAsync<string>("monacoEditorFunctions.disposeEditor", "indexItemEditorContainer");
    }
}